// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AppiumWinApp.FeatureFiles
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Battery Health")]
    public partial class BatteryHealthFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FeatureFiles", "Battery Health", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "BatteryHealth.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01Test Case ID 1685572: Verify that capture is not allowed on device set for list" +
            "ening test")]
        [NUnit.Framework.TestCaseAttribute("NX977-DWC", "2300809943", "Yes", "Right", "Left", "2300809945", "Rechargeable", null)]
        public async System.Threading.Tasks.Task _01TestCaseID1685572VerifyThatCaptureIsNotAllowedOnDeviceSetForListeningTest(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string deviceSlNo, string devicetype, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01Test Case ID 1685572: Verify that capture is not allowed on device set for list" +
                    "ening test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await testRunner.GivenAsync(string.Format("Launch socket Driver \"{0}\"and\"{1}\"", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"<AlterFSWNo>\" and \"{0}\" and \"{1}\" and \"{" +
                            "2}\"and\"{3}\"]", deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
 await testRunner.WhenAsync("[Perform Capture with listening test settings]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 13
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 15
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 16
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
 await testRunner.WhenAsync("[Perform Capture with listening test settings]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 19
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
 await testRunner.WhenAsync("[Perform Capture with listening test settings]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02Test Case ID 1105675: Verify that the battery health of a RHI is reset on clone" +
            " (SWAP)")]
        [NUnit.Framework.TestCaseAttribute("NX977-DWC", "Left", "Right", "Device A", "Device B", "Device C", "Device D", "Yes", "No", "2300809945", "NoDev", "2300809943", "Yes", "Cdevice", "Cdevice", "Rechargeable", null)]
        public async System.Threading.Tasks.Task _02TestCaseID1105675VerifyThatTheBatteryHealthOfARHIIsResetOnCloneSWAP(
                    string deviceId, 
                    string deviceLeft, 
                    string deviceRight, 
                    string dumpA, 
                    string dumpB, 
                    string dumpC, 
                    string dumpD, 
                    string alterFSW, 
                    string alterFSWNo, 
                    string deviceSlNo, 
                    string noDevice, 
                    string deviceLeftSlNo, 
                    string flashHI, 
                    string deviceCSlno, 
                    string deviceC, 
                    string devicetype, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DumpA", dumpA);
            argumentsOfScenario.Add("DumpB", dumpB);
            argumentsOfScenario.Add("DumpC", dumpC);
            argumentsOfScenario.Add("DumpD", dumpD);
            argumentsOfScenario.Add("AlterFSW", alterFSW);
            argumentsOfScenario.Add("AlterFSWNo", alterFSWNo);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("NoDevice", noDevice);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceCSlno", deviceCSlno);
            argumentsOfScenario.Add("DeviceC", deviceC);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02Test Case ID 1105675: Verify that the battery health of a RHI is reset on clone" +
                    " (SWAP)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4" +
                            "}\"]", alterFSWNo, deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
 await testRunner.WhenAsync(string.Format("[Launch algo and alter ADL value \"{0}\" and \"{1}\"and\"{2}\"]", deviceId, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 36
 await testRunner.WhenAsync(string.Format("[Go to Device Info tab and capture device info in excel then verify the device in" +
                            "formation is shown correctly \"{0}\"]", devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 41
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using RTS option \"{0}\" and \"{1}\" and \"" +
                            "{2}\" and \"{3}\"and\"{4}\"]", deviceLeftSlNo, deviceSlNo, deviceId, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
 await testRunner.WhenAsync(string.Format("[Launch algo lab and check the ADL value \"{0}\" and \"{1}\"and \"{2}\" and \"{3}\"]", deviceId, deviceSlNo, devicetype, deviceRight), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using SWAP option \"{0}\" and \"{1}\" and " +
                            "\"{2}\" and \"{3}\"and\"{4}\"]", deviceSlNo, deviceLeftSlNo, deviceId, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 45
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
 await testRunner.GivenAsync("[Set Development and Verification System Role in Basic Setting for System Configu" +
                        "ration]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 47
 await testRunner.GivenAsync(string.Format("[Change channel side in FDTS{0}]", deviceRight), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 48
 await testRunner.GivenAsync(string.Format("Launch FDTS WorkFlow And Flash Device \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4}\"" +
                            "", deviceId, deviceLeftSlNo, flashHI, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 49
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using SWAP with left \"{0}\" and \"{0}\" a" +
                            "nd \"{1}\" and \"{2}\"and\"{3}\"]", deviceLeftSlNo, deviceId, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
 await testRunner.WhenAsync(string.Format("[Launch algo lab and check the ADL value \"{0}\" and \"{1}\"and \"{2}\" and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceRight), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03Test Case ID 1413300: Verify that battery ADL data is reset during restoration " +
            "on new device")]
        [NUnit.Framework.TestCaseAttribute("NX977-DWC", "Left", "Right", "Device A", "Device B", "Device C", "Device D", "Yes", "No", "2300809945", "NoDev", "2300809943", "Yes", "Cdevice", "Cdevice", "Rechargeable", null)]
        public async System.Threading.Tasks.Task _03TestCaseID1413300VerifyThatBatteryADLDataIsResetDuringRestorationOnNewDevice(
                    string deviceId, 
                    string deviceLeft, 
                    string deviceRight, 
                    string dumpA, 
                    string dumpB, 
                    string dumpC, 
                    string dumpD, 
                    string alterFSW, 
                    string alterFSWNo, 
                    string deviceSlNo, 
                    string noDevice, 
                    string deviceLeftSlNo, 
                    string flashHI, 
                    string deviceCSlno, 
                    string deviceC, 
                    string devicetype, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DumpA", dumpA);
            argumentsOfScenario.Add("DumpB", dumpB);
            argumentsOfScenario.Add("DumpC", dumpC);
            argumentsOfScenario.Add("DumpD", dumpD);
            argumentsOfScenario.Add("AlterFSW", alterFSW);
            argumentsOfScenario.Add("AlterFSWNo", alterFSWNo);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("NoDevice", noDevice);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceCSlno", deviceCSlno);
            argumentsOfScenario.Add("DeviceC", deviceC);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03Test Case ID 1413300: Verify that battery ADL data is reset during restoration " +
                    "on new device", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 62
    await testRunner.GivenAsync(string.Format("Launch HIRegistration Tool to Unregister Cloud Info for Device A \"{0}\"", deviceLeftSlNo), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 63
 await testRunner.GivenAsync("[Set Service GROC System Role in Basic Setting for System Configuration]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 64
 await testRunner.GivenAsync(string.Format("[Change channel side in FDTS{0}]", deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 65
 await testRunner.GivenAsync(string.Format("Launch FDTS WorkFlow And Flash Device \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4}\"" +
                            "", deviceId, deviceLeftSlNo, flashHI, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 66
 await testRunner.GivenAsync("[Set Development and Verification System Role in Basic Setting for System Configu" +
                        "ration]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 67
 await testRunner.GivenAsync(string.Format("[Change channel side in FDTS{0}]", deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 68
 await testRunner.GivenAsync(string.Format("Launch FDTS WorkFlow And Flash Device \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4}\"" +
                            "", deviceId, deviceLeftSlNo, flashHI, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 69
 await testRunner.GivenAsync("[Set Development and Verification System Role in Basic Setting for System Configu" +
                        "ration]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 70
 await testRunner.GivenAsync(string.Format("[Change channel side in FDTS{0}]", deviceRight), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 71
 await testRunner.GivenAsync(string.Format("Launch FDTS WorkFlow And Flash Device \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4}\"" +
                            "", deviceId, deviceSlNo, flashHI, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 72
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4" +
                            "}\"]", alterFSW, deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 73
 await testRunner.WhenAsync(string.Format("[Launch algo and alter ADL value \"{0}\" and \"{1}\"and\"{2}\"]", deviceId, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 74
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 75
 await testRunner.WhenAsync(string.Format("[Go to Device Info tab and capture device info in excel then verify the device in" +
                            "formation is shown correctly \"{0}\"]", devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 76
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 77
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 78
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 79
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 80
 await testRunner.ThenAsync(string.Format("[Launch Algo with fresh device B and validate the ADL Battery values \"{0}\" and \"{" +
                            "1}\" and \"{2}\"]", deviceId, deviceSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 81
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using SWAP option \"{0}\" and \"{1}\" and " +
                            "\"{2}\" and \"{3}\"and\"{4}\"]", deviceSlNo, deviceLeftSlNo, deviceId, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 82
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 83
 await testRunner.GivenAsync(string.Format("[Change channel side in FDTS{0}]", deviceRight), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 84
 await testRunner.GivenAsync(string.Format("Launch FDTS WorkFlow And Flash Device \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4}\"" +
                            "", deviceId, deviceLeftSlNo, flashHI, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 85
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using SWAP with left \"{0}\" and \"{0}\" a" +
                            "nd \"{1}\" and \"{2}\"and\"{3}\"]", deviceLeftSlNo, deviceId, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 86
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 87
 await testRunner.ThenAsync(string.Format("[Launch Algo with fresh device B and validate the ADL Battery values \"{0}\" and \"{" +
                            "1}\" and \"{2}\"]", deviceId, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 88
 await testRunner.GivenAsync(string.Format("[Change channel side in FDTS{0}]", deviceRight), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 89
 await testRunner.GivenAsync(string.Format("Launch FDTS WorkFlow And Flash Device \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4}\"" +
                            "", deviceId, deviceSlNo, flashHI, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 90
 await testRunner.WhenAsync(string.Format("[Launch algo and alter ADL value for device B \"{0}\" and \"{1}\"and\"{2}\"]", deviceId, deviceSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 91
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using SWAP option \"{0}\" and \"{1}\" and " +
                            "\"{2}\" and \"{3}\"and\"{4}\"]", deviceSlNo, deviceLeftSlNo, deviceId, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 92
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 93
 await testRunner.GivenAsync(string.Format("[Change channel side in FDTS{0}]", deviceRight), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 94
 await testRunner.GivenAsync(string.Format("Launch FDTS WorkFlow And Flash Device \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4}\"" +
                            "", deviceId, deviceLeftSlNo, flashHI, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 95
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using SWAP with left \"{0}\" and \"{0}\" a" +
                            "nd \"{1}\" and \"{2}\"and\"{3}\"]", deviceLeftSlNo, deviceId, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 96
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 97
 await testRunner.ThenAsync(string.Format("[Launch Algo with fresh device B and validate the ADL Battery values \"{0}\" and \"{" +
                            "1}\" and \"{2}\"]", deviceId, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04Test Case ID 1539304: Verify that capture and restore on devices with low batte" +
            "ry is handled correctly")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "Left", "Right", "Device A", "Device B", "Device C", "Device D", "Yes", "No", "2476130454", "NoDev", "2476130453", "Yes", "Cdevice", "Cdevice", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _04TestCaseID1539304VerifyThatCaptureAndRestoreOnDevicesWithLowBatteryIsHandledCorrectly(
                    string deviceId, 
                    string deviceLeft, 
                    string deviceRight, 
                    string dumpA, 
                    string dumpB, 
                    string dumpC, 
                    string dumpD, 
                    string alterFSW, 
                    string alterFSWNo, 
                    string deviceSlNo, 
                    string noDevice, 
                    string deviceLeftSlNo, 
                    string flashHI, 
                    string deviceCSlno, 
                    string deviceC, 
                    string devicetype, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DumpA", dumpA);
            argumentsOfScenario.Add("DumpB", dumpB);
            argumentsOfScenario.Add("DumpC", dumpC);
            argumentsOfScenario.Add("DumpD", dumpD);
            argumentsOfScenario.Add("AlterFSW", alterFSW);
            argumentsOfScenario.Add("AlterFSWNo", alterFSWNo);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("NoDevice", noDevice);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceCSlno", deviceCSlno);
            argumentsOfScenario.Add("DeviceC", deviceC);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04Test Case ID 1539304: Verify that capture and restore on devices with low batte" +
                    "ry is handled correctly", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 108
    await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 109
 await testRunner.WhenAsync(string.Format("[Go to Device Info tab and capture device info in excel then verify the device in" +
                            "formation is shown correctly \"{0}\"]", devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 110
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 111
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 112
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
