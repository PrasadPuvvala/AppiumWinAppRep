// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AppiumWinApp.FeatureFiles
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SandRWorkFlow")]
    public partial class SandRWorkFlowFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FeatureFiles", "SandRWorkFlow", "A short Summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "SandRWorkFlow.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 5
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01Test Case ID 1590317: Verify that C4 extensions is working correctly on S&R Too" +
            "l update")]
        [NUnit.Framework.CategoryAttribute("tag1")]
        public async System.Threading.Tasks.Task _01TestCaseID1590317VerifyThatC4ExtensionsIsWorkingCorrectlyOnSRToolUpdate()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01Test Case ID 1590317: Verify that C4 extensions is working correctly on S&R Too" +
                    "l update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 14
 await testRunner.GivenAsync("Downloading latest S&R C4 extension from the app-gop-apt-devops site", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 15
 await testRunner.WhenAsync("[Install the latest S&R C4 extension]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02Test Case ID 1103494: Verify windows installer for S&R tool")]
        [NUnit.Framework.CategoryAttribute("tag2")]
        public async System.Threading.Tasks.Task _02TestCaseID1103494VerifyWindowsInstallerForSRTool()
        {
            string[] tagsOfScenario = new string[] {
                    "tag2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02Test Case ID 1103494: Verify windows installer for S&R tool", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 21
 await testRunner.GivenAsync("Downloading latest S&R beta version from the app-gop-apt-devops site", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 22
 await testRunner.WhenAsync("[Install the latest S&R Tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03Test Case ID 1105696: Verify that fitting data is properly restored during rest" +
            "oration on new device (RTS)")]
        [NUnit.Framework.CategoryAttribute("tag3")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "Left", "Right", "Device A", "Device B", "Device C", "Device D", "Yes", "No", "2476130209", "NoDev", "2476130208", "Yes", "Cdevice", "Cdevice", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _03TestCaseID1105696VerifyThatFittingDataIsProperlyRestoredDuringRestorationOnNewDeviceRTS(
                    string deviceId, 
                    string deviceLeft, 
                    string deviceRight, 
                    string dumpA, 
                    string dumpB, 
                    string dumpC, 
                    string dumpD, 
                    string alterFSW, 
                    string alterFSWNo, 
                    string deviceSlNo, 
                    string noDevice, 
                    string deviceLeftSlNo, 
                    string flashHI, 
                    string deviceCSlno, 
                    string deviceC, 
                    string devicetype, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag3"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DumpA", dumpA);
            argumentsOfScenario.Add("DumpB", dumpB);
            argumentsOfScenario.Add("DumpC", dumpC);
            argumentsOfScenario.Add("DumpD", dumpD);
            argumentsOfScenario.Add("AlterFSW", alterFSW);
            argumentsOfScenario.Add("AlterFSWNo", alterFSWNo);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("NoDevice", noDevice);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceCSlno", deviceCSlno);
            argumentsOfScenario.Add("DeviceC", deviceC);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03Test Case ID 1105696: Verify that fitting data is properly restored during rest" +
                    "oration on new device (RTS)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 28
 await testRunner.GivenAsync("[Cleaning up dumps before execution starts]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 29
 await testRunner.GivenAsync(string.Format("Launch socket Driver \"{0}\"and\"{1}\"", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 34
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4" +
                            "}\"]", alterFSW, deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
 await testRunner.WhenAsync(string.Format("[Get the dump of connected device by storage layout \"{0}\" and \"{1}\" and \"{2}\"and\"" +
                            "{3}\"]", deviceId, deviceLeft, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
 await testRunner.WhenAsync("[Go to logs and verify capturing time]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 49
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using RTS option \"{0}\" and \"{1}\" and \"" +
                            "{2}\" and \"{3}\"and\"{4}\"]", deviceLeftSlNo, deviceSlNo, deviceId, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
 await testRunner.WhenAsync(string.Format("[Get the dump of connected device by storage layout \"{0}\" and \"{1}\" and \"{2}\"and\"" +
                            "{3}\"]", deviceId, deviceRight, deviceSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 53
 await testRunner.ThenAsync(string.Format("[Do the dump comparison between two device dumps{0}]", dumpB), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 58
 await testRunner.WhenAsync(string.Format("[Change communication channel in S and R{0}]", deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 60
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 61
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 62
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 63
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4" +
                            "}\"]", alterFSWNo, deviceId, deviceSlNo, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
 await testRunner.WhenAsync(string.Format("[Get the dump of connected device by storage layout \"{0}\" and \"{1}\" and \"{2}\"and\"" +
                            "{3}\"]", deviceId, dumpC, deviceSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 68
 await testRunner.ThenAsync(string.Format("[Do the dump comparison between two device dumps{0}]", dumpC), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 69
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using RTS option \"{0}\" and \"{1}\" and \"" +
                            "{2}\" and \"{3}\"and\"{4}\"]", deviceLeftSlNo, deviceSlNo, deviceId, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 70
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
 await testRunner.WhenAsync(string.Format("[Get the dump of connected device by storage layout \"{0}\" and \"{1}\" and \"{2}\"and\"" +
                            "{3}\"]", deviceId, dumpD, deviceSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 73
 await testRunner.ThenAsync(string.Format("[Do the dump comparison between two device dumps{0}]", dumpD), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04Test Case ID 1537268: Verify that battery ADL data is restored on original devi" +
            "ce")]
        [NUnit.Framework.CategoryAttribute("tag4")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "2476130208", "Yes", "Right", "Left", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _04TestCaseID1537268VerifyThatBatteryADLDataIsRestoredOnOriginalDevice(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string devicetype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag4"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04Test Case ID 1537268: Verify that battery ADL data is restored on original devi" +
                    "ce", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 103
 await testRunner.WhenAsync(string.Format("[Verify StorageLayout Scenario By Changing Date and Confirm Cloud Icon \"{0}\" and " +
                            "\"{1}\" and \"{2}\"and\"{3}\"]", deviceId, deviceLeft, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 104
 await testRunner.WhenAsync("[Cleaning up Capture and Restore Reports Before Launch SandR]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 105
 await testRunner.WhenAsync(string.Format("[Change communication channel in S and R{0}]", deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 106
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 107
 await testRunner.WhenAsync(string.Format("[Go to Device Info tab and capture device info in excel then verify the device in" +
                            "formation is shown correctly \"{0}\"]", devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 108
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 109
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 110
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 111
 await testRunner.WhenAsync("[Go to logs and verify capturing time]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 112
 await testRunner.WhenAsync(string.Format("[Launch algo and alter ADL value \"{0}\" and \"{1}\"and\"{2}\"]", deviceId, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 113
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image \"{0}\" and \"{1}\"and\"{2}\" and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 114
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 117
 await testRunner.WhenAsync(string.Format("[Launch algo lab and check the ADL value \"{0}\" and \"{1}\"and \"{2}\"]", deviceId, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 118
 await testRunner.WhenAsync("[Go to log file for verifying Restore time]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05Test Case ID 1103972: Verify device information is shown correctly")]
        [NUnit.Framework.CategoryAttribute("tag5")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "2476130208", "Yes", "Right", "Left", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _05TestCaseID1103972VerifyDeviceInformationIsShownCorrectly(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string devicetype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag5"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("05Test Case ID 1103972: Verify device information is shown correctly", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 140
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 142
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"<AlterFSWNo>\" and \"{0}\" and \"{1}\" and \"{" +
                            "2}\"and\"{3}\"]", deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 143
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 144
 await testRunner.WhenAsync(string.Format("[Go to Device Info tab and capture device info in excel then verify the device in" +
                            "formation is shown correctly \"{0}\"]", devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 145
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 146
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06Test Case ID 1105474: Verify capture operation is performed within desired time" +
            "")]
        [NUnit.Framework.CategoryAttribute("tag6")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "2476130208", "Yes", "Right", "Left", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _06TestCaseID1105474VerifyCaptureOperationIsPerformedWithinDesiredTime(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string devicetype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag6"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("06Test Case ID 1105474: Verify capture operation is performed within desired time" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 175
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 178
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 179
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 180
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 181
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 182
 await testRunner.WhenAsync("[Go to logs and verify capturing time]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("07Test Case ID 1103482: Verify supported PC configuration")]
        [NUnit.Framework.CategoryAttribute("tag7")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "2476130208", "Yes", "Right", "Left", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _07TestCaseID1103482VerifySupportedPCConfiguration(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string devicetype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag7"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("07Test Case ID 1103482: Verify supported PC configuration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 204
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 207
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 208
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 209
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 210
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 212
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image \"{0}\" and \"{1}\"and\"{2}\" and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 213
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("08Test Case ID 1103833: Verify channel can be changed while S&R tool is running")]
        [NUnit.Framework.CategoryAttribute("tag8")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "2476130208", "Yes", "Right", "Left", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _08TestCaseID1103833VerifyChannelCanBeChangedWhileSRToolIsRunning(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string devicetype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag8"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("08Test Case ID 1103833: Verify channel can be changed while S&R tool is running", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 236
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 239
 await testRunner.WhenAsync(string.Format("[Change communication channel in S and R{0}]", deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("09Test Case ID 1104002: Verify HI capture/restoration report")]
        [NUnit.Framework.CategoryAttribute("tag9")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "2476130208", "Yes", "Right", "Left", "Non-Rechargeable", "capture", "restore", null)]
        public async System.Threading.Tasks.Task _09TestCaseID1104002VerifyHICaptureRestorationReport(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string devicetype, string captureScenarioTitle, string restoreScenarioTitle, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag9"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("Devicetype", devicetype);
            argumentsOfScenario.Add("CaptureScenarioTitle", captureScenarioTitle);
            argumentsOfScenario.Add("RestoreScenarioTitle", restoreScenarioTitle);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("09Test Case ID 1104002: Verify HI capture/restoration report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 260
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 263
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 264
 await testRunner.WhenAsync("[Cleaning up Capture and Restore Reports Before Launch SandR]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 265
 await testRunner.WhenAsync(string.Format("[Go to Device Info tab and capture device info in excel then verify the device in" +
                            "formation is shown correctly \"{0}\"]", devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 266
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 267
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 268
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 269
 await testRunner.GivenAsync(string.Format("[Download and verify azure storage files \"{0}\" and \"{1}\"]", captureScenarioTitle, deviceLeftSlNo), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 270
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 271
 await testRunner.ThenAsync("[Do the Comparison between Azure Data and SandR Data]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 272
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 274
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image \"{0}\" and \"{1}\"and\"{2}\" and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 275
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 276
 await testRunner.GivenAsync(string.Format("[Download and verify azure storage files \"{0}\" and \"{1}\"]", restoreScenarioTitle, deviceLeftSlNo), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 277
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 278
 await testRunner.ThenAsync("[Do the Comparison between Azure Data and SandR Data]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 279
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("10Test Case ID 1105498: Verify that S&R Tool properly sets listening test setting" +
            "s")]
        [NUnit.Framework.CategoryAttribute("tag10")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "2476130208", "Yes", "Right", "Left", "2476130209", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _10TestCaseID1105498VerifyThatSRToolProperlySetsListeningTestSettings(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string deviceSlNo, string devicetype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag10"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("10Test Case ID 1105498: Verify that S&R Tool properly sets listening test setting" +
                    "s", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 328
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 335
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"<AlterFSWNo>\" and \"{0}\" and \"{1}\" and \"{" +
                            "2}\"and\"{3}\"]", deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 336
 await testRunner.WhenAsync(string.Format("[Change communication channel in S and R{0}]", deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 337
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 339
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 340
 await testRunner.WhenAsync("[Perform Capture with listening test settings]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 341
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 342
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 343
 await testRunner.ThenAsync(string.Format("[Launch FSW and check the added programs \"{0}\" and \"{1}\" and \"{2}\"and\"{3}\"]", deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("11Test Case ID 1629628: Verify that firmware is upgraded if conditions apply")]
        [NUnit.Framework.CategoryAttribute("tag11")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "Left", "Right", "Device A", "Device B", "Device C", "Device D", "Temp", "Yes", "No", "2476130209", "NoDev", "2476130208", "Yes", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _11TestCaseID1629628VerifyThatFirmwareIsUpgradedIfConditionsApply(
                    string deviceId, 
                    string deviceLeft, 
                    string deviceRight, 
                    string dumpA, 
                    string dumpB, 
                    string dumpC, 
                    string dumpD, 
                    string deviceTemp, 
                    string alterFSW, 
                    string alterFSWNo, 
                    string deviceSlNo, 
                    string noDevice, 
                    string deviceLeftSlNo, 
                    string flashHI, 
                    string devicetype, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag11"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DumpA", dumpA);
            argumentsOfScenario.Add("DumpB", dumpB);
            argumentsOfScenario.Add("DumpC", dumpC);
            argumentsOfScenario.Add("DumpD", dumpD);
            argumentsOfScenario.Add("DeviceTemp", deviceTemp);
            argumentsOfScenario.Add("AlterFSW", alterFSW);
            argumentsOfScenario.Add("AlterFSWNo", alterFSWNo);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("NoDevice", noDevice);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("11Test Case ID 1629628: Verify that firmware is upgraded if conditions apply", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 370
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 374
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4" +
                            "}\"]", alterFSW, deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 375
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 376
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 377
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 378
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 380
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using SWAP option \"{0}\" and \"{1}\" and " +
                            "\"{2}\" and \"{3}\"and\"{4}\"]", deviceSlNo, deviceLeftSlNo, deviceId, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 381
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 383
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 384
 await testRunner.ThenAsync(string.Format("[Compare firmware version is upgraded successfully \"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 385
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("12Test Case ID 1629629: Verify that firmware is downgraded if conditions apply")]
        [NUnit.Framework.CategoryAttribute("tag12")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "Left", "Right", "Device A", "Device B", "Device C", "Device D", "Temp", "Yes", "No", "2476130209", "NoDev", "2476130208", "Yes", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _12TestCaseID1629629VerifyThatFirmwareIsDowngradedIfConditionsApply(
                    string deviceId, 
                    string deviceLeft, 
                    string deviceRight, 
                    string dumpA, 
                    string dumpB, 
                    string dumpC, 
                    string dumpD, 
                    string deviceTemp, 
                    string alterFSW, 
                    string alterFSWNo, 
                    string deviceSlNo, 
                    string noDevice, 
                    string deviceLeftSlNo, 
                    string flashHI, 
                    string devicetype, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag12"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DumpA", dumpA);
            argumentsOfScenario.Add("DumpB", dumpB);
            argumentsOfScenario.Add("DumpC", dumpC);
            argumentsOfScenario.Add("DumpD", dumpD);
            argumentsOfScenario.Add("DeviceTemp", deviceTemp);
            argumentsOfScenario.Add("AlterFSW", alterFSW);
            argumentsOfScenario.Add("AlterFSWNo", alterFSWNo);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("NoDevice", noDevice);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("12Test Case ID 1629629: Verify that firmware is downgraded if conditions apply", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 411
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 416
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4" +
                            "}\"]", alterFSW, deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 417
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 418
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 419
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 420
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 421
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4" +
                            "}\"]", alterFSW, deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 422
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using SWAP option \"{0}\" and \"{1}\" and " +
                            "\"{2}\" and \"{3}\"and\"{4}\"]", deviceSlNo, deviceLeftSlNo, deviceId, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 423
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 424
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 425
 await testRunner.ThenAsync(string.Format("[Compare firmware version is upgraded successfully \"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 426
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("13Test Case ID 1105470: Verify the data saved during capture and cleaning in Came" +
            "lot Cloud")]
        [NUnit.Framework.CategoryAttribute("tag13")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "2476130208", "Yes", "Right", "Left", "2476130209", "capture", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _13TestCaseID1105470VerifyTheDataSavedDuringCaptureAndCleaningInCamelotCloud(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string deviceSlNo, string scenarioTitle, string devicetype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag13"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("ScenarioTitle", scenarioTitle);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("13Test Case ID 1105470: Verify the data saved during capture and cleaning in Came" +
                    "lot Cloud", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 450
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 453
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 454
 await testRunner.WhenAsync(string.Format("[Go to Device Info tab and capture device info in excel then verify the device in" +
                            "formation is shown correctly \"{0}\"]", devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 455
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 456
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 457
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 458
 await testRunner.GivenAsync(string.Format("[Download and verify azure storage files \"{0}\" and \"{1}\"]", scenarioTitle, deviceLeftSlNo), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 460
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 461
 await testRunner.ThenAsync("[Do the Comparison between Azure Data and SandR Data]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 462
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("14Test Case ID 1101758: Verify device information is uploaded to Camelot cloud co" +
            "rrectly")]
        [NUnit.Framework.CategoryAttribute("tag14")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "2476130208", "Yes", "Right", "Left", "2476130209", "service records", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _14TestCaseID1101758VerifyDeviceInformationIsUploadedToCamelotCloudCorrectly(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string deviceSlNo, string scenarioTitle, string devicetype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag14"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("ScenarioTitle", scenarioTitle);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("14Test Case ID 1101758: Verify device information is uploaded to Camelot cloud co" +
                    "rrectly", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 486
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 491
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"<AlterFSWNo>\" and \"{0}\" and \"{1}\" and \"{" +
                            "2}\"and\"{3}\"]", deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 492
 await testRunner.WhenAsync(string.Format("[Verify StorageLayout Scenario By Changing Date and Confirm Cloud Icon \"{0}\" and " +
                            "\"{1}\" and \"{2}\"and\"{3}\"]", deviceId, deviceLeft, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 493
 await testRunner.WhenAsync(string.Format("[Change communication channel in S and R{0}]", deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 494
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 495
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 496
 await testRunner.GivenAsync(string.Format("[Download and verify azure storage files \"{0}\" and \"{1}\"]", scenarioTitle, deviceLeftSlNo), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 498
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 499
 await testRunner.ThenAsync("[Do the Comparison between Azure Data and SandR Data]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 500
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("15Test Case ID 1105521: Verify the data saved during restore in Camelot Cloud")]
        [NUnit.Framework.CategoryAttribute("tag15")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "2476130208", "Yes", "Right", "Left", "2476130209", "restore", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _15TestCaseID1105521VerifyTheDataSavedDuringRestoreInCamelotCloud(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string deviceSlNo, string scenarioTitle, string devicetype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag15"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("ScenarioTitle", scenarioTitle);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("15Test Case ID 1105521: Verify the data saved during restore in Camelot Cloud", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 523
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 526
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 528
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 529
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 530
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image \"{0}\" and \"{1}\"and\"{2}\" and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 531
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 534
 await testRunner.GivenAsync(string.Format("[Download and verify azure storage files \"{0}\" and \"{1}\"]", scenarioTitle, deviceLeftSlNo), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 535
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 536
 await testRunner.ThenAsync("[Do the Comparison between Azure Data and SandR Data]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 537
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("16Test Case ID 1103983: Verify cloud icon is shown when device information in sav" +
            "ed in cloud")]
        [NUnit.Framework.CategoryAttribute("tag16")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "2476130208", "Yes", "Right", "Left", "2476130209", "service records", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _16TestCaseID1103983VerifyCloudIconIsShownWhenDeviceInformationInSavedInCloud(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string deviceSlNo, string scenarioTitle, string devicetype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag16"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("ScenarioTitle", scenarioTitle);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("16Test Case ID 1103983: Verify cloud icon is shown when device information in sav" +
                    "ed in cloud", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 560
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 566
 await testRunner.WhenAsync(string.Format("[Verify StorageLayout Scenario By Changing Date and Confirm Cloud Icon \"{0}\" and " +
                            "\"{1}\" and \"{2}\"and\"{3}\"]", deviceId, deviceLeft, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 567
 await testRunner.WhenAsync(string.Format("[Change communication channel in S and R{0}]", deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 568
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 569
 await testRunner.GivenAsync(string.Format("[Download and verify azure storage files \"{0}\" and \"{1}\"]", scenarioTitle, deviceLeftSlNo), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 570
 await testRunner.ThenAsync("[Close SandR tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("17Test Case ID 1105669: Verify that fitting data is properly restored during rest" +
            "oration on original device or Clone  (SWAP)")]
        [NUnit.Framework.CategoryAttribute("tag17")]
        [NUnit.Framework.TestCaseAttribute("NX9ITC-DW-MP", "Left", "Right", "Device A", "Device B", "Device C", "Device D", "Temp", "Yes", "No", "2476130209", "NoDev", "2476130208", "Yes", "Non-Rechargeable", null)]
        public async System.Threading.Tasks.Task _17TestCaseID1105669VerifyThatFittingDataIsProperlyRestoredDuringRestorationOnOriginalDeviceOrCloneSWAP(
                    string deviceId, 
                    string deviceLeft, 
                    string deviceRight, 
                    string dumpA, 
                    string dumpB, 
                    string dumpC, 
                    string dumpD, 
                    string deviceTemp, 
                    string alterFSW, 
                    string alterFSWNo, 
                    string deviceSlNo, 
                    string noDevice, 
                    string deviceLeftSlNo, 
                    string flashHI, 
                    string devicetype, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag17"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DumpA", dumpA);
            argumentsOfScenario.Add("DumpB", dumpB);
            argumentsOfScenario.Add("DumpC", dumpC);
            argumentsOfScenario.Add("DumpD", dumpD);
            argumentsOfScenario.Add("DeviceTemp", deviceTemp);
            argumentsOfScenario.Add("AlterFSW", alterFSW);
            argumentsOfScenario.Add("AlterFSWNo", alterFSWNo);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("NoDevice", noDevice);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("17Test Case ID 1105669: Verify that fitting data is properly restored during rest" +
                    "oration on original device or Clone  (SWAP)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 592
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 594
 await testRunner.GivenAsync("[Cleaning up dumps before execution starts]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 600
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4" +
                            "}\"]", alterFSW, deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 601
 await testRunner.WhenAsync(string.Format("[Get the dump of connected device by storage layout \"{0}\" and \"{1}\" and \"{2}\"and\"" +
                            "{3}\"]", deviceId, deviceLeft, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 602
 await testRunner.WhenAsync("[Cleaning up Capture and Restore Reports Before Launch SandR]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 603
 await testRunner.WhenAsync(string.Format("[Change communication channel in S and R{0}]", deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 605
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 607
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 608
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 609
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 610
 await testRunner.WhenAsync("[Go to logs and verify capturing time]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 611
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4" +
                            "}\"]", alterFSWNo, deviceId, deviceLeftSlNo, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 615
 await testRunner.WhenAsync(string.Format("[Get the dump of connected device left of DumpB by storage layout \"{0}\" and \"{1}\"" +
                            " and \"{2}\"and\"{3}\"]", deviceId, deviceLeft, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 616
 await testRunner.ThenAsync(string.Format("[Do the dump comparison between two devices in Swap dumps\"{0}\"]", dumpB), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 618
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using SWAP option \"{0}\" and \"{1}\" and " +
                            "\"{2}\" and \"{3}\"and\"{4}\"]", deviceSlNo, deviceLeftSlNo, deviceId, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 619
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 621
 await testRunner.WhenAsync(string.Format("[Get the dump of connected device of left DumpC by storage layout \"{0}\" and \"{1}\"" +
                            " and \"{2}\"and\"{3}\"]", deviceId, deviceLeft, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 622
 await testRunner.ThenAsync(string.Format("[Do the dump comparison between two devices in Swap dumps\"{0}\"]", dumpC), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 623
 await testRunner.WhenAsync(string.Format("[Change communication channel in S and R{0}]", deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 625
 await testRunner.WhenAsync(string.Format("[Launch SandR \"{0}\" and \"{1}\"and\"{2}\"and \"{3}\"]", deviceId, deviceLeftSlNo, devicetype, deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 627
 await testRunner.WhenAsync("[Come back to Settings and wait till controls enabled]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 628
 await testRunner.WhenAsync(string.Format("[Perform Capture\"{0}\"and\"{1}\"]", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 629
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 630
 await testRunner.WhenAsync("[Go to logs and verify capturing time]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 635
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using SWAP with left \"{0}\" and \"{1}\" a" +
                            "nd \"{2}\" and \"{3}\"and\"{4}\"]", deviceSlNo, deviceLeftSlNo, deviceId, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 636
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 637
 await testRunner.GivenAsync(string.Format("[Change channel side in FDTS{0}]", deviceRight), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 638
 await testRunner.GivenAsync(string.Format("Launch FDTS WorkFlow And Flash Device \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4}\"" +
                            "", deviceId, deviceLeftSlNo, flashHI, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 639
 await testRunner.WhenAsync(string.Format("[Perform Restore with above captured image using SWAP with left \"{0}\" and \"{0}\" a" +
                            "nd \"{1}\" and \"{2}\"and\"{3}\"]", deviceLeftSlNo, deviceId, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 640
 await testRunner.AndAsync("[Open Capture and Restore report and log info in report]", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 641
 await testRunner.WhenAsync(string.Format("[Get the dump of connected device of DumpD by storage layout \"{0}\" and \"{1}\" and " +
                            "\"{2}\"and\"{3}\"]", deviceId, deviceRight, deviceLeftSlNo, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 643
 await testRunner.ThenAsync(string.Format("[Do the dump comparison between two device DeviceC and DeviceD dumps{0}]", dumpD), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 644
 await testRunner.WhenAsync("[Uninstall the current S&R Tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("18Test Case ID 1142328: PC_Verify HI can be PC programmed properly.")]
        [NUnit.Framework.CategoryAttribute("tag18")]
        [NUnit.Framework.TestCaseAttribute("NX960S-DRWC", "2400802586", "Yes", "Right", "Left", "2400802587", "Rechargeable", null)]
        public async System.Threading.Tasks.Task _18TestCaseID1142328PC_VerifyHICanBePCProgrammedProperly_(string deviceId, string deviceLeftSlNo, string flashHI, string deviceRight, string deviceLeft, string deviceSlNo, string devicetype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag18"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DeviceId", deviceId);
            argumentsOfScenario.Add("DeviceLeftSlNo", deviceLeftSlNo);
            argumentsOfScenario.Add("FlashHI", flashHI);
            argumentsOfScenario.Add("DeviceRight", deviceRight);
            argumentsOfScenario.Add("DeviceLeft", deviceLeft);
            argumentsOfScenario.Add("DeviceSlNo", deviceSlNo);
            argumentsOfScenario.Add("Devicetype", devicetype);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("18Test Case ID 1142328: PC_Verify HI can be PC programmed properly.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 674
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 676
 await testRunner.GivenAsync(string.Format("Launch socket Driver \"{0}\"and\"{1}\"", deviceId, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 678
 await testRunner.GivenAsync(string.Format("[Change channel side in FDTS{0}]", deviceLeft), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 679
 await testRunner.GivenAsync(string.Format("Launch FDTS WorkFlow And Flash Device \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4}\"" +
                            "", deviceId, deviceLeftSlNo, flashHI, deviceLeft, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 680
 await testRunner.WhenAsync(string.Format("[Create a Patient and Fitting HI In FSW \"<AlterFSW>\" and \"{0}\" and \"{1}\" and \"{2}" +
                            "\"and\"{3}\"]", deviceId, deviceSlNo, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 681
 await testRunner.GivenAsync(string.Format("[Change channel side in FDTS{0}]", deviceRight), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 682
 await testRunner.GivenAsync(string.Format("Launch FDTS WorkFlow And Flash Device \"{0}\" and \"{1}\" and \"{2}\" and \"{3}\"and\"{4}\"" +
                            "", deviceId, deviceSlNo, flashHI, deviceRight, devicetype), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
