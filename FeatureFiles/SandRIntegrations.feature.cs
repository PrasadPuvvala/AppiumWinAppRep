// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AppiumWinApp.FeatureFiles
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SandRInterations")]
    public partial class SandRInterationsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FeatureFiles", "SandRInterations", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "SandRIntegrations.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01Test Case ID 1703234: S&R [VA] -  Verify that a connection string with a format" +
            " other than Base64 is not acceptable.")]
        [NUnit.Framework.TestCaseAttribute("VA", "rtikertgey", "Connection string must be Base64 encoded", null)]
        public async System.Threading.Tasks.Task _01TestCaseID1703234SRVA_VerifyThatAConnectionStringWithAFormatOtherThanBase64IsNotAcceptable_(string systemRole, string invalidBase64Value, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SystemRole", systemRole);
            argumentsOfScenario.Add("InvalidBase64Value", invalidBase64Value);
            argumentsOfScenario.Add("Message", message);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01Test Case ID 1703234: S&R [VA] -  Verify that a connection string with a format" +
                    " other than Base64 is not acceptable.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 9
    await testRunner.GivenAsync("[Launch SandRTool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
 await testRunner.WhenAsync(string.Format("[Navigate to settings tab and set the system role to \"{0}\"]", systemRole), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
 await testRunner.ThenAsync(string.Format("[Click on set sales order connection string and input the invalid base string \"{0" +
                            "}\"]", invalidBase64Value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 12
 await testRunner.ThenAsync(string.Format("[Verify the error message on the connection string pop-up window \"{0}\"]", message), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 13
 await testRunner.ThenAsync(string.Format("[Verify that a \"{0}\" string in the user config file in the local machine]", invalidBase64Value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02Test Case ID 1703237: S&R [VA] -  Verify that a valid connection string is save" +
            "d in the user config file in the local machine")]
        [NUnit.Framework.TestCaseAttribute("VA", "lkjhgfdunukg", null)]
        public async System.Threading.Tasks.Task _02TestCaseID1703237SRVA_VerifyThatAValidConnectionStringIsSavedInTheUserConfigFileInTheLocalMachine(string systemRole, string validBase64Value, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SystemRole", systemRole);
            argumentsOfScenario.Add("ValidBase64Value", validBase64Value);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02Test Case ID 1703237: S&R [VA] -  Verify that a valid connection string is save" +
                    "d in the user config file in the local machine", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 25
     await testRunner.GivenAsync("[Launch SandRTool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 26
     await testRunner.WhenAsync(string.Format("[Navigate to settings tab and set the system role to \"{0}\"]", systemRole), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
  await testRunner.ThenAsync(string.Format("[Click on set sales order connection string and input the valid base string \"{0}\"" +
                            "]", validBase64Value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
  await testRunner.ThenAsync(string.Format("[Verify that a \"{0}\" string in the user config file in the local machine]", validBase64Value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03Test Case ID 1703238: S&R [VA] -  Verify that a connection string is overridden" +
            " when a new valid connection string is input.")]
        [NUnit.Framework.TestCaseAttribute("VA", "lokjhtrevbiarfjh", "mfsvywnf", null)]
        public async System.Threading.Tasks.Task _03TestCaseID1703238SRVA_VerifyThatAConnectionStringIsOverriddenWhenANewValidConnectionStringIsInput_(string systemRole, string validBase64Value1, string validBase64Value2, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SystemRole", systemRole);
            argumentsOfScenario.Add("ValidBase64Value1", validBase64Value1);
            argumentsOfScenario.Add("ValidBase64Value2", validBase64Value2);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03Test Case ID 1703238: S&R [VA] -  Verify that a connection string is overridden" +
                    " when a new valid connection string is input.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 40
     await testRunner.GivenAsync("[Launch SandRTool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 41
    await testRunner.WhenAsync(string.Format("[Navigate to settings tab and set the system role to \"{0}\"]", systemRole), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
  await testRunner.ThenAsync(string.Format("[Click on set sales order connection string and input the valid base string \"{0}\"" +
                            "]", validBase64Value1), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 43
  await testRunner.ThenAsync(string.Format("[Verify that a \"{0}\" string in the user config file in the local machine]", validBase64Value1), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 44
  await testRunner.ThenAsync(string.Format("[Click on set sales order connection string and input the valid base string \"{0}\"" +
                            "]", validBase64Value2), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 45
  await testRunner.ThenAsync(string.Format("[Verify that a \"{0}\" string in the user config file in the local machine]", validBase64Value2), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04Test Case ID 1703240: S&R [VA] -  Verify that Set Sales Order Connection String" +
            " feature is available only for VA role")]
        [NUnit.Framework.TestCaseAttribute("VA", "Repairs", null)]
        public async System.Threading.Tasks.Task _04TestCaseID1703240SRVA_VerifyThatSetSalesOrderConnectionStringFeatureIsAvailableOnlyForVARole(string systemRole1, string systemRole2, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SystemRole1", systemRole1);
            argumentsOfScenario.Add("SystemRole2", systemRole2);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04Test Case ID 1703240: S&R [VA] -  Verify that Set Sales Order Connection String" +
                    " feature is available only for VA role", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 54
     await testRunner.GivenAsync("[Launch SandRTool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 55
  await testRunner.WhenAsync(string.Format("[Navigate to settings tab and set the system role to \"{0}\"]", systemRole1), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 56
  await testRunner.ThenAsync("[Verify the visibility of connection string]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 57
  await testRunner.WhenAsync(string.Format("[Navigate to settings tab and set the system role to \"{0}\"]", systemRole2), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
  await testRunner.ThenAsync("[Verify the visibility of connection string other than VA system role]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05Test Case ID 1696030: S&R [VA] - Inputting, Validating, and Retaining Connectio" +
            "n String.")]
        [NUnit.Framework.TestCaseAttribute("VA", "malounbeopwnksymclau", "Set sales order connection string", null)]
        public async System.Threading.Tasks.Task _05TestCaseID1696030SRVA_InputtingValidatingAndRetainingConnectionString_(string systemRole, string validBase64Value, string connectionStringButton, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SystemRole", systemRole);
            argumentsOfScenario.Add("ValidBase64Value", validBase64Value);
            argumentsOfScenario.Add("ConnectionStringButton", connectionStringButton);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("05Test Case ID 1696030: S&R [VA] - Inputting, Validating, and Retaining Connectio" +
                    "n String.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 69
      await testRunner.GivenAsync("[Launch SandRTool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 70
   await testRunner.WhenAsync(string.Format("[Navigate to settings tab and set the system role to \"{0}\"]", systemRole), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 71
   await testRunner.ThenAsync(string.Format("[Click on set sales order connection string and input the valid base string \"{0}\"" +
                            "]", validBase64Value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 72
   await testRunner.ThenAsync(string.Format("[Verify that a \"{0}\" string in the user config file in the local machine]", validBase64Value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 73
   await testRunner.WhenAsync("[Uninstall the current S&R Tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 74
   await testRunner.WhenAsync("[Install the latest S&R Tool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 75
   await testRunner.GivenAsync("[Launch SandRTool]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 76
   await testRunner.ThenAsync(string.Format("[Validate the previous SystemRole \"{0}\" and valid base connection string \"{1}\" an" +
                            "d \"{2}\" is preserved to latest S&R]", systemRole, validBase64Value, connectionStringButton), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 77
   await testRunner.ThenAsync(string.Format("[Verify that a \"{0}\" string in the user config file in the local machine]", validBase64Value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
